# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test1.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os

from PyQt5.QtCore import Qt
from PyQt5.QtGui import QPixmap, QPainter, QPainterPath
from qtpy import QtCore, QtWidgets

from GUI.dialog_getcover import Dialog_Cover
from GUI.dialog_information import Dialog_Information
from GUI.dialog_proxy import Dialog_Proxy
from GUI.dialog_ranking import Dialog_Ranking
from GUI.dialog_week import Dialog_Week
from GUI.widget_arrangefavfolder import Widget_ArrangeFavFolder
from GUI.widget_download import Widget_Download
from GUI.widget_downloadhistory import Widget_DownloadHistory
from GUI.widget_music import Widget_Music
from GUI.widget_research import Widget_Research
from GUI.widget_select import Widget_Select
from GUI.widget_sort import Widget_Sort
from GUI.widget_sortfavfolder import Widget_SortFavFolder
from Spider.getBiliCookie import *
from Spider.getBiliInfo import *


class MyLabel(QtWidgets.QLabel):
    mouseDoubleClickSignal = QtCore.pyqtSignal()

    def __init__(self, parent=None):
        super(MyLabel, self).__init__(parent)

    def mousePressEvent(self, e):
        self.mouseDoubleClickSignal.emit()


class Ui_MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        # 未登录默认头像
        self.photo = QPixmap("image/un.png")
        # 登录GUI
        self.w = GetCookie()
        self.w._signal.connect(self.getData)
        # 功能GUI
        self.widget_download = Widget_Download()
        self.widget_downloadhistory = Widget_DownloadHistory()
        self.widget_sortfavfolder = Widget_SortFavFolder()
        self.widget_select = Widget_Select()
        self.widget_research = Widget_Research()
        self.dialog_information = Dialog_Information()
        self.dialog_proxy = Dialog_Proxy()
        self.dialog_proxy.reload.connect(self.proxyHandler)
        self.dialog_week = Dialog_Week()
        self.dialog_week.reload.connect(self.show_PopularSeries)
        self.dialog_ranking = Dialog_Ranking()
        self.dialog_ranking.reload.connect(self.show_Ranking)
        self.widget_arrangefavfolder = Widget_ArrangeFavFolder()
        self.dialog_getcover = Dialog_Cover()
        self.widget_sort = Widget_Sort()
        self.widget_music = Widget_Music()
        # 代理IP和端口
        self.ip = False
        self.port = False
        with open('Proxy', 'r') as f:
            jsonData = json.load(f)
            if jsonData:
                self.ip = jsonData['ip']
                self.port = jsonData['port']
        # 为每个GUI设定代理
        self.widget_select.ip = self.ip
        self.widget_select.port = self.port
        self.widget_research.ip = self.ip
        self.widget_research.port = self.port
        self.widget_sortfavfolder.ip = self.ip
        self.widget_sortfavfolder.port = self.port
        # 渲染主窗口GUI
        self.setupUi()

    def getData(self, username, faceurl):
        _translate = QtCore.QCoreApplication.translate
        self.username.setText(username)
        if len(faceurl) > 0:
            r = requests.get(faceurl)
            photo = QPixmap()
            photo.loadFromData(r.content)
            pixmap = QPixmap(200, 200)
            pixmap.fill(Qt.transparent)
            painter = QPainter(pixmap)
            painter.begin(self)  # 要将绘制过程用begin(self)和end()包起来
            painter.setRenderHints(QPainter.Antialiasing | QPainter.SmoothPixmapTransform)  # 一个是平滑，一个是缩放保持比例
            path = QPainterPath()
            path.addEllipse(0, 0, 200, 200)  # 绘制椭圆
            painter.setClipPath(path)
            painter.drawPixmap(0, 0, 200, 200, photo)
            painter.end()
            self.face.setPixmap(pixmap)
            self.face.setScaledContents(True)

    def proxyHandler(self, ip, port):
        if ip != "" and port != "":
            self.ip = ip
            self.port = port
            with open('Proxy', 'w') as f:
                data = {
                    'ip': ip,
                    'port': port
                }
                f.write(json.dumps(data))
        else:
            with open('Proxy', 'w') as f:
                f.write("{}")

    def setupUi(self):
        self.setObjectName("MainWindow")
        self.setWindowModality(QtCore.Qt.NonModal)
        self.setFixedSize(1200, 700)
        self.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("image/bili.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.setWindowIcon(icon)
        self.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.setAutoFillBackground(False)
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.widget_left = QtWidgets.QWidget(self.centralwidget)
        self.widget_left.setGeometry(QtCore.QRect(0, 0, 271, 701))
        self.widget_left.setObjectName("widget_left")
        self.face = QtWidgets.QLabel(self.widget_left)
        self.face.setGeometry(QtCore.QRect(70, 50, 131, 131))
        self.face.setAlignment(QtCore.Qt.AlignCenter)
        self.face.setObjectName("face")
        self.username = MyLabel(self.widget_left)
        self.username.setGeometry(QtCore.QRect(40, 180, 191, 31))
        self.username.setAlignment(QtCore.Qt.AlignCenter)
        self.username.setObjectName("username")
        self.username.mouseDoubleClickSignal.connect(self.show_Information)
        self.toolBox = QtWidgets.QToolBox(self.widget_left)
        self.toolBox.setGeometry(QtCore.QRect(20, 220, 231, 461))
        self.toolBox.setObjectName("toolBox")
        self.select = QtWidgets.QWidget()
        self.select.setGeometry(QtCore.QRect(0, 0, 231, 263))
        self.select.setObjectName("select")
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.select)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(10, 0, 211, 251))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.action_history_2 = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.action_history_2.setObjectName("action_history_2")
        self.verticalLayout_2.addWidget(self.action_history_2)
        self.action_popular_2 = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.action_popular_2.setObjectName("action_popular_2")
        self.verticalLayout_2.addWidget(self.action_popular_2)
        self.action_popularprecious_2 = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.action_popularprecious_2.setObjectName("action_popularprecious_2")
        self.verticalLayout_2.addWidget(self.action_popularprecious_2)
        self.action_popularseries_2 = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.action_popularseries_2.setObjectName("action_popularseries_2")
        self.verticalLayout_2.addWidget(self.action_popularseries_2)
        self.action_ranking_2 = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.action_ranking_2.setObjectName("action_ranking_2")
        self.verticalLayout_2.addWidget(self.action_ranking_2)
        self.toolBox.addItem(self.select, "")
        self.favfolder = QtWidgets.QWidget()
        self.favfolder.setGeometry(QtCore.QRect(0, 0, 231, 263))
        self.favfolder.setObjectName("favfolder")
        self.verticalLayoutWidget_3 = QtWidgets.QWidget(self.favfolder)
        self.verticalLayoutWidget_3.setGeometry(QtCore.QRect(10, 0, 211, 101))
        self.verticalLayoutWidget_3.setObjectName("verticalLayoutWidget_3")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_3)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.action_arrangefavfolder_2 = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        self.action_arrangefavfolder_2.setObjectName("action_arrangefavfolder_2")
        self.verticalLayout_3.addWidget(self.action_arrangefavfolder_2)
        self.action_sortfavfolder_2 = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        self.action_sortfavfolder_2.setObjectName("action_sortfavfolder_2")
        self.verticalLayout_3.addWidget(self.action_sortfavfolder_2)
        self.toolBox.addItem(self.favfolder, "")
        self.search = QtWidgets.QWidget()
        self.search.setGeometry(QtCore.QRect(0, 0, 231, 263))
        self.search.setObjectName("search")
        self.verticalLayoutWidget_6 = QtWidgets.QWidget(self.search)
        self.verticalLayoutWidget_6.setGeometry(QtCore.QRect(10, 0, 211, 101))
        self.verticalLayoutWidget_6.setObjectName("verticalLayoutWidget_6")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_6)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.action_recommend_2 = QtWidgets.QPushButton(self.verticalLayoutWidget_6)
        self.action_recommend_2.setObjectName("action_recommend_2")
        self.verticalLayout_6.addWidget(self.action_recommend_2)
        self.action_doubleSearch = QtWidgets.QPushButton(self.verticalLayoutWidget_6)
        self.action_doubleSearch.setObjectName("action_doubleSearch")
        self.verticalLayout_6.addWidget(self.action_doubleSearch)
        self.toolBox.addItem(self.search, "")
        self.download = QtWidgets.QWidget()
        self.download.setGeometry(QtCore.QRect(0, 0, 231, 263))
        self.download.setObjectName("download")
        self.verticalLayoutWidget_4 = QtWidgets.QWidget(self.download)
        self.verticalLayoutWidget_4.setGeometry(QtCore.QRect(10, 0, 211, 101))
        self.verticalLayoutWidget_4.setObjectName("verticalLayoutWidget_4")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_4)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.action_videodownload_2 = QtWidgets.QPushButton(self.verticalLayoutWidget_4)
        self.action_videodownload_2.setObjectName("action_videodownload_2")
        self.verticalLayout_4.addWidget(self.action_videodownload_2)
        self.action_downloadmanage_2 = QtWidgets.QPushButton(self.verticalLayoutWidget_4)
        self.action_downloadmanage_2.setObjectName("action_downloadmanage_2")
        self.verticalLayout_4.addWidget(self.action_downloadmanage_2)
        self.toolBox.addItem(self.download, "")
        self.tool = QtWidgets.QWidget()
        self.tool.setGeometry(QtCore.QRect(0, 0, 231, 263))
        self.tool.setObjectName("tool")
        self.verticalLayoutWidget_5 = QtWidgets.QWidget(self.tool)
        self.verticalLayoutWidget_5.setGeometry(QtCore.QRect(10, 0, 211, 101))
        self.verticalLayoutWidget_5.setObjectName("verticalLayoutWidget_5")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_5)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.action_pic_2 = QtWidgets.QPushButton(self.verticalLayoutWidget_5)
        self.action_pic_2.setObjectName("action_pic_2")
        self.verticalLayout_5.addWidget(self.action_pic_2)
        self.action_bgm_2 = QtWidgets.QPushButton(self.verticalLayoutWidget_5)
        self.action_bgm_2.setObjectName("action_bgm_2")
        self.verticalLayout_5.addWidget(self.action_bgm_2)
        self.toolBox.addItem(self.tool, "")
        self.setting = QtWidgets.QWidget()
        self.setting.setGeometry(QtCore.QRect(0, 0, 231, 263))
        self.setting.setObjectName("setting")
        self.verticalLayoutWidget_7 = QtWidgets.QWidget(self.setting)
        self.verticalLayoutWidget_7.setGeometry(QtCore.QRect(10, 0, 211, 101))
        self.verticalLayoutWidget_7.setObjectName("verticalLayoutWidget_7")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_7)
        self.verticalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.action_proxy_2 = QtWidgets.QPushButton(self.verticalLayoutWidget_7)
        self.action_proxy_2.setObjectName("action_proxy_2")
        self.verticalLayout_7.addWidget(self.action_proxy_2)
        self.pushButton_quit = QtWidgets.QPushButton(self.verticalLayoutWidget_7)
        self.pushButton_quit.setObjectName("pushButton_quit")
        self.verticalLayout_7.addWidget(self.pushButton_quit)
        self.toolBox.addItem(self.setting, "")
        self.pushButton = QtWidgets.QPushButton(self.widget_left)
        self.pushButton.setGeometry(QtCore.QRect(15, 15, 31, 31))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.widget_left)
        self.pushButton_2.setGeometry(QtCore.QRect(50, 15, 31, 31))
        self.pushButton_2.setObjectName("pushButton_2")
        self.widget_right = QtWidgets.QWidget(self.centralwidget)
        self.widget_right.setGeometry(QtCore.QRect(270, 0, 931, 701))
        self.widget_right.setObjectName("widget_right")
        self.gridLayoutWidget = QtWidgets.QWidget(self.widget_right)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(0, 0, 931, 701))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout_right = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout_right.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_right.setObjectName("gridLayout_right")
        self.gridLayout_right.addWidget(self.widget_download)
        self.widget_download.hide()
        self.gridLayout_right.addWidget(self.widget_downloadhistory)
        self.widget_downloadhistory.hide()
        self.gridLayout_right.addWidget(self.widget_sortfavfolder)
        self.widget_sortfavfolder.hide()
        self.gridLayout_right.addWidget(self.widget_select)
        self.widget_select.hide()
        self.gridLayout_right.addWidget(self.widget_research)
        self.widget_research.hide()
        self.gridLayout_right.addWidget(self.widget_arrangefavfolder)
        self.widget_arrangefavfolder.hide()
        self.gridLayout_right.addWidget(self.widget_sort)
        self.widget_sort.hide()
        self.gridLayout_right.addWidget(self.widget_music)
        self.widget_music.hide()
        self.setCentralWidget(self.centralwidget)

        self.retranslateUi(self)
        self.toolBox.setCurrentIndex(0)
        self.toolBox.layout().setSpacing(10)
        self.pushButton_quit.clicked.connect(self.quit)
        self.pushButton.clicked.connect(self.close)
        self.pushButton_2.clicked.connect(self.showMinimized)
        self.action_proxy_2.clicked.connect(self.show_proxy)
        self.action_videodownload_2.clicked.connect(self.show_download)
        self.action_downloadmanage_2.clicked.connect(self.show_downloadhistory)
        self.action_sortfavfolder_2.clicked.connect(self.show_sortfavfolder)
        self.action_recommend_2.clicked.connect(self.show_research)
        self.action_arrangefavfolder_2.clicked.connect(self.show_arrangefavfolder)
        self.action_doubleSearch.clicked.connect(self.show_Sort)
        self.action_pic_2.clicked.connect(self.show_cover)
        self.action_bgm_2.clicked.connect(self.show_music)
        '''综合热门'''
        self.action_popular_2.clicked.connect(self.show_Popular)
        '''入站比刷'''
        self.action_popularprecious_2.clicked.connect(self.show_Popularprecious)
        '''每周必看'''
        self.action_popularseries_2.clicked.connect(self.show_Dialog_Week)
        '''排行榜'''
        self.action_ranking_2.clicked.connect(self.show_Dialog_Ranking)
        '''历史记录'''
        self.action_history_2.clicked.connect(self.show_History)
        QtCore.QMetaObject.connectSlotsByName(self)
        self.setTabOrder(self.action_history_2, self.action_popularprecious_2)
        self.setTabOrder(self.action_popularprecious_2, self.action_popularseries_2)
        self.setTabOrder(self.action_popularseries_2, self.action_ranking_2)
        self.setTabOrder(self.action_ranking_2, self.action_downloadmanage_2)
        self.setTabOrder(self.action_downloadmanage_2, self.action_videodownload_2)
        self.setTabOrder(self.action_videodownload_2, self.action_arrangefavfolder_2)
        self.setTabOrder(self.action_arrangefavfolder_2, self.action_sortfavfolder_2)
        self.setTabOrder(self.action_sortfavfolder_2, self.action_pic_2)
        self.setTabOrder(self.action_bgm_2, self.action_recommend_2)
        self.setTabOrder(self.action_recommend_2, self.action_proxy_2)

        pixmap = QPixmap(200, 200)
        pixmap.fill(Qt.transparent)
        painter = QPainter(pixmap)
        painter.begin(self)  # 要将绘制过程用begin(self)和end()包起来
        painter.setRenderHints(QPainter.Antialiasing | QPainter.SmoothPixmapTransform)  # 一个是平滑，一个是缩放保持比例
        path = QPainterPath()
        path.addEllipse(0, 0, 200, 200)  # 绘制椭圆
        painter.setClipPath(path)
        painter.drawPixmap(0, 0, 200, 200, self.photo)
        painter.end()
        self.face.setPixmap(pixmap)
        self.face.setScaledContents(True)
        self.widget_left.setStyleSheet('''
QToolBox::tab {
    color: #a9b7c6;
    border:none;
    font-size:18px;    
    font-weight:bold;
    text-decoration:underline;
    margin-left:90px;
    background-color:#222b2e;
    font-family: "SimSun";
}
QToolBox::tab:selected {
    color: #FFFFFF;
    background-color:#222b2e;
}
QToolBox {
    color: #a9b7c6;
    background-color: #222b2e;
}
QWidget{
    color: #a9b7c6;
    background-color: #222b2e;
    font-family: "Microsoft YaHei";
    border-top-left-radius:15px;
    border-bottom-left-radius:15px;
}
QPushButton{
    border: none;
}
        ''')
        self.widget_right.setStyleSheet('''
QWidget#widget_right{
    background-color: #FFFFFF;
    font-family: "Microsoft YaHei";
    border-top-right-radius:15px;
    border-bottom-right-radius:15px;
}   
        ''')
        self.setWindowFlag(QtCore.Qt.FramelessWindowHint)
        self.setWindowOpacity(0.95)  # 设置窗口透明度
        self.setAttribute(QtCore.Qt.WA_TranslucentBackground)  # 设置窗口背景透明
        self.pushButton.setFixedSize(25, 25)
        self.pushButton_2.setFixedSize(25, 25)
        self.pushButton.setStyleSheet(
            '''QPushButton{background:#F76677;border-radius:10px;}QPushButton:hover{background:red;}''')
        self.pushButton_2.setStyleSheet(
            '''QPushButton{background:#F7D674;border-radius:10px;}QPushButton:hover{background:yellow;}''')

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "BiliBiliTools"))
        self.face.setText(_translate("MainWindow", "头像框"))
        self.username.setText(_translate("MainWindow", "未登录"))
        self.action_history_2.setText(_translate("MainWindow", "历史记录"))
        self.action_popular_2.setText(_translate("MainWindow", "综合热门"))
        self.action_popularprecious_2.setText(_translate("MainWindow", "入站必刷"))
        self.action_popularseries_2.setText(_translate("MainWindow", "每周必看"))
        self.action_ranking_2.setText(_translate("MainWindow", "排行榜"))
        self.toolBox.setItemText(self.toolBox.indexOf(self.select), _translate("MainWindow", "筛 选"))
        self.action_arrangefavfolder_2.setText(_translate("MainWindow", "整理"))
        self.action_sortfavfolder_2.setText(_translate("MainWindow", "分类"))
        self.toolBox.setItemText(self.toolBox.indexOf(self.favfolder), _translate("MainWindow", "收 藏"))
        self.action_recommend_2.setText(_translate("MainWindow", "相关视频"))
        self.action_doubleSearch.setText(_translate("MainWindow", "重搜索"))
        self.toolBox.setItemText(self.toolBox.indexOf(self.search), _translate("MainWindow", "搜 索"))
        self.action_videodownload_2.setText(_translate("MainWindow", "视频下载"))
        self.action_downloadmanage_2.setText(_translate("MainWindow", "下载管理"))
        self.toolBox.setItemText(self.toolBox.indexOf(self.download), _translate("MainWindow", "下 载"))
        self.action_pic_2.setText(_translate("MainWindow", "封面提取"))
        self.action_bgm_2.setText(_translate("MainWindow", "识别BGM"))
        self.toolBox.setItemText(self.toolBox.indexOf(self.tool), _translate("MainWindow", "工 具"))
        self.action_proxy_2.setText(_translate("MainWindow", "网络代理"))
        self.pushButton_quit.setText(_translate("MainWindow", "退出登录"))
        self.toolBox.setItemText(self.toolBox.indexOf(self.setting), _translate("MainWindow", "设 置"))
        cookie = readExistCookie()
        if cookie:
            jsonstring = getBiliUserInfo(getBiliUserUid(cookie))
            username = parseUsername(jsonstring)
            if username:
                self.username.setText(_translate("MainWindow", username))
            else:
                self.username.setText(_translate("MainWindow", "<u>未登录</u>"))
            faceurl = parseFacePhoto(jsonstring)
            if faceurl:
                r = requests.get(faceurl)
                self.photo = QPixmap()
                self.photo.loadFromData(r.content)
                pixmap = QPixmap(200, 200)
                pixmap.fill(Qt.transparent)
                painter = QPainter(pixmap)
                painter.begin(self)  # 要将绘制过程用begin(self)和end()包起来
                painter.setRenderHints(QPainter.Antialiasing | QPainter.SmoothPixmapTransform)  # 一个是平滑，一个是缩放保持比例
                path = QPainterPath()
                path.addEllipse(0, 0, 200, 200)  # 绘制椭圆
                painter.setClipPath(path)
                painter.drawPixmap(0, 0, 200, 200, self.photo)
                painter.end()
                self.face.setPixmap(pixmap)
                self.face.setScaledContents(True)
        else:
            self.username.setText(_translate("MainWindow", "<u>未登录</u>"))

    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.m_flag = True
            self.m_Position = event.globalPos() - self.pos()  # 获取鼠标相对窗口的位置
            event.accept()

    def mouseMoveEvent(self, QMouseEvent):
        if Qt.LeftButton and self.m_flag:
            self.move(QMouseEvent.globalPos() - self.m_Position)  # 更改窗口位置
            QMouseEvent.accept()

    def mouseReleaseEvent(self, QMouseEvent):
        self.m_flag = False

    def loadCookie(self):
        self.w.show()
        self.w.MaingridLayout.addWidget(self.w.webview)
        self.w.webview.show()

    def show_proxy(self):
        self.dialog_proxy.show()

    def show_download(self):
        if not readExistCookie():
            QMessageBox.critical(self, "错误", "请先登录！")
            return
        self.widget_download.show()
        self.widget_downloadhistory.hide()
        self.widget_sortfavfolder.hide()
        self.widget_select.hide()
        self.widget_research.hide()
        self.widget_arrangefavfolder.hide()
        self.widget_sort.hide()
        self.widget_music.hide()

    def show_downloadhistory(self):
        if not readExistCookie():
            QMessageBox.critical(self, "错误", "请先登录！")
            return
        self.widget_downloadhistory.show()
        self.widget_download.hide()
        self.widget_sortfavfolder.hide()
        self.widget_select.hide()
        self.widget_research.hide()
        self.widget_arrangefavfolder.hide()
        self.widget_sort.hide()
        self.widget_music.hide()

    def show_sortfavfolder(self):
        if not readExistCookie():
            QMessageBox.critical(self, "错误", "请先登录！")
            return
        self.widget_sortfavfolder.show()
        self.widget_download.hide()
        self.widget_downloadhistory.hide()
        self.widget_select.hide()
        self.widget_research.hide()
        self.widget_arrangefavfolder.hide()
        self.widget_sort.hide()
        self.widget_music.hide()

    def show_Popular(self):
        if not readExistCookie():
            QMessageBox.critical(self, "错误", "请先登录！")
            return
        self.widget_download.hide()
        self.widget_sortfavfolder.hide()
        self.widget_downloadhistory.hide()
        self.widget_research.hide()
        self.widget_arrangefavfolder.hide()
        self.widget_sort.hide()
        self.widget_music.hide()
        if self.widget_select.isHidden():
            self.widget_select.show()
        self.widget_select.loadPopular()

    '''爬取入站必刷'''

    def show_Popularprecious(self):
        if not readExistCookie():
            QMessageBox.critical(self, "错误", "请先登录！")
            return
        self.widget_research.hide()
        self.widget_download.hide()
        self.widget_sortfavfolder.hide()
        self.widget_downloadhistory.hide()
        self.widget_arrangefavfolder.hide()
        self.widget_sort.hide()
        self.widget_music.hide()
        if self.widget_select.isHidden():
            self.widget_select.show()
        self.widget_select.loadPopularprecious()

    '''爬取每周必看'''

    def show_PopularSeries(self, week):
        if not readExistCookie():
            QMessageBox.critical(self, "错误", "请先登录！")
            return
        self.widget_research.hide()
        self.widget_download.hide()
        self.widget_sortfavfolder.hide()
        self.widget_downloadhistory.hide()
        self.widget_arrangefavfolder.hide()
        self.widget_sort.hide()
        self.widget_music.hide()
        if self.widget_select.isHidden():
            self.widget_select.show()
        self.widget_select.loadPopularSeries(week)

    '''爬取排行榜'''

    def show_Ranking(self, select):
        rid = 0
        type = 0
        if not readExistCookie():
            QMessageBox.critical(self, "错误", "请先登录！")
            return
        for item in select:
            rid = item
            type = select[item]
        self.widget_research.hide()
        self.widget_download.hide()
        self.widget_sortfavfolder.hide()
        self.widget_downloadhistory.hide()
        self.widget_arrangefavfolder.hide()
        self.widget_sort.hide()
        self.widget_music.hide()
        if self.widget_select.isHidden():
            self.widget_select.show()
        self.widget_select.loadRanking(rid, type)

    def show_research(self):
        if not readExistCookie():
            QMessageBox.critical(self, "错误", "请先登录！")
            return
        self.widget_research.show()
        self.widget_download.hide()
        self.widget_sortfavfolder.hide()
        self.widget_downloadhistory.hide()
        self.widget_select.hide()
        self.widget_arrangefavfolder.hide()
        self.widget_sort.hide()
        self.widget_music.hide()

    def show_History(self):
        if not readExistCookie():
            QMessageBox.critical(self, "错误", "请先登录！")
            return
        self.widget_research.hide()
        self.widget_download.hide()
        self.widget_sortfavfolder.hide()
        self.widget_downloadhistory.hide()
        self.widget_arrangefavfolder.hide()
        self.widget_sort.hide()
        self.widget_music.hide()
        if self.widget_select.isHidden():
            self.widget_select.show()
        self.widget_select.loadHistory()

    def show_arrangefavfolder(self):
        if not readExistCookie():
            QMessageBox.critical(self, "错误", "请先登录！")
            return
        self.widget_download.hide()
        self.widget_downloadhistory.hide()
        self.widget_sortfavfolder.hide()
        self.widget_select.hide()
        self.widget_research.hide()
        self.widget_sort.hide()
        self.widget_music.hide()
        self.widget_arrangefavfolder.show()

    def show_Information(self):
        if self.username.text() != "<u>未登录</u>":
            self.dialog_information.show()
        else:
            self.loadCookie()

    def show_Dialog_Ranking(self):
        self.dialog_ranking.show()

    def show_Dialog_Week(self):
        self.dialog_week.show()

    def quit(self):
        if not readExistCookie():
            QMessageBox.critical(self, "错误", "请先登录！")
            return
        os.remove("Cookie")
        self.username.setText("<u>未登录</u>")
        self.photo = QPixmap("image/un.png")
        pixmap = QPixmap(200, 200)
        pixmap.fill(Qt.transparent)
        painter = QPainter(pixmap)
        painter.begin(self)  # 要将绘制过程用begin(self)和end()包起来
        painter.setRenderHints(QPainter.Antialiasing | QPainter.SmoothPixmapTransform)  # 一个是平滑，一个是缩放保持比例
        path = QPainterPath()
        path.addEllipse(0, 0, 200, 200)  # 绘制椭圆
        painter.setClipPath(path)
        painter.drawPixmap(0, 0, 200, 200, self.photo)
        painter.end()
        self.face.setPixmap(pixmap)

    def show_cover(self):
        if not readExistCookie():
            QMessageBox.critical(self, "错误", "请先登录！")
            return
        self.dialog_getcover.show()

    def show_Sort(self):
        if not readExistCookie():
            QMessageBox.critical(self, "错误", "请先登录！")
            return
        self.widget_sort.show()
        self.widget_download.hide()
        self.widget_downloadhistory.hide()
        self.widget_sortfavfolder.hide()
        self.widget_select.hide()
        self.widget_research.hide()
        self.widget_sortfavfolder.hide()
        self.widget_music.hide()
        self.widget_arrangefavfolder.hide()

    def show_music(self):
        if not readExistCookie():
            QMessageBox.critical(self, "错误", "请先登录！")
            return
        self.widget_music.show()
        self.widget_sort.hide()
        self.widget_download.hide()
        self.widget_downloadhistory.hide()
        self.widget_sortfavfolder.hide()
        self.widget_select.hide()
        self.widget_research.hide()
        self.widget_sortfavfolder.hide()
