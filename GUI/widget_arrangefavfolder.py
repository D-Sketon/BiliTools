# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'widget_FavFolder.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import json
import threading
import time

import requests
from PyQt5 import QtCore, QtWidgets
from PyQt5.QtCore import QThread, QSize, Qt
from PyQt5.QtGui import QStandardItemModel, QStandardItem, QPixmap, QIcon, QFont
from PyQt5.QtWidgets import QHeaderView, QApplication, QMessageBox
from qtpy import QtGui

from GUI.widget_download import ThreadForDownload
from Parse.parseData import parseTag
from Parse.parseFavFolder import parseFavFolderList, parseFavFolder
from Spider.doFavFolder import getFavFolderList, getFavFolder, addFavFolder, moveFavResource, delFavFolder
from Spider.getBiliInfo import getBiliUserUid
from Spider.getHeader import readExistCookie
from Spider.getTag import getTag
from Utils.bv2av import bvToav


class Widget_ArrangeFavFolder(QtWidgets.QWidget):

    def __init__(self):
        super().__init__()
        self.favfolderlist = []
        self.piclist = []
        self.threadList = []
        self.id = ""
        self.model = QStandardItemModel(len(self.favfolderlist), 3)  # 创建 行和列 固定的 模板
        self.model.setHorizontalHeaderLabels(['封面', '标题', 'ID号'])  # 设置每列标题
        self.setupUi()

    def setupUi(self):
        self.setObjectName("Form")
        self.setFixedSize(930, 700)
        self.widget = QtWidgets.QWidget(self)
        self.widget.setGeometry(QtCore.QRect(0, 0, 931, 701))
        self.widget.setObjectName("widget")
        self.arrange = QtWidgets.QPushButton(self.widget)
        self.arrange.setGeometry(QtCore.QRect(490, 70, 100, 35))
        self.arrange.setObjectName("arrange")
        self.download = QtWidgets.QPushButton(self.widget)
        self.download.setGeometry(QtCore.QRect(650, 70, 100, 35))
        self.download.setObjectName("download")
        self.radioButton_ctime = QtWidgets.QRadioButton(self.widget)
        self.radioButton_ctime.setGeometry(QtCore.QRect(30, 80, 115, 19))
        self.radioButton_ctime.setObjectName("radioButton_ctime")
        self.radioButton_play = QtWidgets.QRadioButton(self.widget)
        self.radioButton_play.setGeometry(QtCore.QRect(150, 80, 115, 19))
        self.radioButton_play.setObjectName("radioButton_play")
        self.radioButton_collect = QtWidgets.QRadioButton(self.widget)
        self.radioButton_collect.setGeometry(QtCore.QRect(250, 80, 115, 19))
        self.radioButton_collect.setObjectName("radioButton_collect")
        self.radioButton_dm = QtWidgets.QRadioButton(self.widget)
        self.radioButton_dm.setGeometry(QtCore.QRect(350, 80, 115, 19))
        self.radioButton_dm.setObjectName("radioButton_dm")
        self.tableView = QtWidgets.QTableView(self.widget)
        self.tableView.setGeometry(QtCore.QRect(20, 170, 890, 440))
        self.tableView.setObjectName("tableView")
        self.tableView.setModel(self.model)
        self.tableView.setColumnWidth(0, 300)
        self.tableView.setColumnWidth(1, 550)
        self.tableView.horizontalHeader().setMinimumSectionSize(5)
        self.tableView.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tableView.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.tableView.verticalHeader().setHidden(True)
        # self.tableView.horizontalHeader().setHidden(True)
        self.tableView.horizontalHeader().setSectionResizeMode(0, QHeaderView.Interactive)
        self.tableView.horizontalHeader().setSectionResizeMode(1, QHeaderView.Interactive)
        self.tableView.horizontalHeader().setSectionResizeMode(2, QHeaderView.Interactive)
        self.tableView.setShowGrid(False)
        self.tableView.setIconSize(QSize(170, 100))
        for j in range(len(self.favfolderlist)):
            self.tableView.setRowHeight(j, 100)

        self.retranslateUi(self)
        self.arrange.clicked.connect(self.arrangefavfolder)
        self.tableView.clicked.connect(self.get_id)
        self.tableView.doubleClicked.connect(self.open_url)
        self.download.clicked.connect(self.video_download)
        QtCore.QMetaObject.connectSlotsByName(self)
        self.widget.setStyleSheet('''
        QWidget{
            background-color: #FFFFFF;
            font-family: "Microsoft YaHei";
            border-top-right-radius:15px;
        }   
        QLineEdit, QTextEdit, QPlainTextEdit, QSpinBox, QDoubleSpinBox, QTimeEdit, QDateEdit, QDateTimeEdit {
            border-width: 2px;
            border-radius: 8px;
            border-style: solid;
            border-top-color: qlineargradient(spread:pad, x1:0.5, y1:1, x2:0.5, y2:0, stop:0 #c1c9cf, stop:1 #d2d8dd);
            border-right-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 #c1c9cf, stop:1 #d2d8dd);
            border-bottom-color: qlineargradient(spread:pad, x1:0.5, y1:0, x2:0.5, y2:1, stop:0 #c1c9cf, stop:1 #d2d8dd);
            border-left-color: qlineargradient(spread:pad, x1:1, y1:0, x2:0, y2:0, stop:0 #c1c9cf, stop:1 #d2d8dd);
            background-color: #f4f4f4;
            color: #3d3d3d;
        }
        QLineEdit:focus, QTextEdit:focus, QPlainTextEdit:focus, QSpinBox:focus, QDoubleSpinBox:focus, QTimeEdit:focus, QDateEdit:focus, QDateTimeEdit:focus {
            border-width: 2px;
            border-radius: 8px;
            border-style: solid;
            border-top-color: qlineargradient(spread:pad, x1:0.5, y1:1, x2:0.5, y2:0, stop:0 #85b7e3, stop:1 #9ec1db);
            border-right-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 #85b7e3, stop:1 #9ec1db);
            border-bottom-color: qlineargradient(spread:pad, x1:0.5, y1:0, x2:0.5, y2:1, stop:0 #85b7e3, stop:1 #9ec1db);
            border-left-color: qlineargradient(spread:pad, x1:1, y1:0, x2:0, y2:0, stop:0 #85b7e3, stop:1 #9ec1db);
            background-color: #f4f4f4;
            color: #3d3d3d;
        }
        QLineEdit:disabled, QTextEdit:disabled, QPlainTextEdit:disabled, QSpinBox:disabled, QDoubleSpinBox:disabled, QTimeEdit:disabled, QDateEdit:disabled, QDateTimeEdit:disabled {
            color: #b9b9b9;
        }
        QRadioButton::indicator {
            height: 14px;
            width: 14px;
            border-style:solid;
            border-radius:7px;
            border-width: 1px;
        }
        QRadioButton::indicator:checked {
            border-color: #48a5fd;
            background-color: qradialgradient(cx:0.5, cy:0.5, radius:0.4,fx:0.5, fy:0.5, stop:0 #ffffff, stop:0.5 #ffffff, stop:0.6 #48a5fd, stop:1 #48a5fd);
        }
        QRadioButton::indicator:!checked {
            border-color: #a9b7c6;
            background-color: #fbfdfa;
        }
        QPushButton, QToolButton, QCommandLinkButton{
            padding: 0 5px 0 5px;
            border-style: solid;
            border-top-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:1, stop:0 #c1c9cf, stop:1 #d2d8dd);
            border-right-color: qlineargradient(spread:pad, x1:1, y1:0, x2:0, y2:0, stop:0 #c1c9cf, stop:1 #d2d8dd);
            border-bottom-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 #c1c9cf, stop:1 #d2d8dd);
            border-left-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 #c1c9cf, stop:1 #d2d8dd);
            border-width: 2px;
            border-radius: 8px;
            color: #616161;
            background-color: qlineargradient(spread:pad, x1:0.5, y1:0, x2:0.5, y2:1, stop:0 #fbfdfd, stop:0.5 #ffffff, stop:1 #fbfdfd);
        }
        QPushButton::default, QToolButton::default, QCommandLinkButton::default{
            border: 2px solid transparent;
            color: #FFFFFF;
            background-color: qlineargradient(spread:pad, x1:0.5, y1:0, x2:0.5, y2:1, stop:0 #84afe5, stop:1 #1168e4);
        }
        QPushButton:hover, QToolButton:hover, QCommandLinkButton:hover{
            color: #3d3d3d;
        }
        QPushButton:pressed, QToolButton:pressed, QCommandLinkButton:pressed{
            color: #aeaeae;
            background-color: qlineargradient(spread:pad, x1:0.5, y1:0, x2:0.5, y2:1, stop:0 #ffffff, stop:0.5 #fbfdfd, stop:1 #ffffff);
        }
        QPushButton:disabled, QToolButton:disabled, QCommandLinkButton:disabled{
            color: #616161;
            background-color: qlineargradient(spread:pad, x1:0.5, y1:0, x2:0.5, y2:1, stop:0 #dce7eb, stop:0.5 #e0e8eb, stop:1 #dee7ec);
        }
        QScrollBar:horizontal {
        max-height: 10px;
        border: 1px transparent grey;
        margin: 0px 20px 0px 20px;
        background: transparent;
        }
        QScrollBar:vertical {
            max-width: 10px;
            border: 1px transparent grey;
            margin: 20px 0px 20px 0px;
            background: transparent;
        }
        QScrollBar::handle:vertical, QScrollBar::handle:horizontal {
            background: #52595d;
            border-style: transparent;
            border-radius: 4px;
            min-height: 25px;
        }
        QScrollBar::handle:horizontal:hover, QScrollBar::handle:vertical:hover {
            background: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 #467dd1, stop:0.5 #3b88fc, stop:1 #467dd1);
        }
        QScrollBar::add-line, QScrollBar::sub-line {
            border: 2px transparent grey;
            border-radius: 4px;
            subcontrol-origin: margin;
            background: #b9b9b9;
        }
        QScrollBar::add-line:horizontal {
            width: 20px;
            subcontrol-position: right;
        }
        QScrollBar::add-line:vertical {
            height: 20px;
            subcontrol-position: bottom;
        }
        QScrollBar::sub-line:horizontal {
            width: 20px;
            subcontrol-position: left;
        }
        QScrollBar::sub-line:vertical {
            height: 20px;
            subcontrol-position: top;
        }
        QScrollBar::add-line:vertical:pressed, QScrollBar::add-line:horizontal:pressed, QScrollBar::sub-line:horizontal:pressed, QScrollBar::sub-line:vertical:pressed {
            background: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 #467dd1, stop:0.5 #3b88fc, stop:1 #467dd1);
        }
        QScrollBar::add-page:horizontal, QScrollBar::sub-page:horizontal, QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {
            background: none;
        }
        QScrollBar::up-arrow:vertical {
            image: url(/usr/share/icons/Adwaita/16x16/actions/go-up-symbolic.symbolic.png);
        }
        QScrollBar::down-arrow:vertical {
            image: url(/usr/share/icons/Adwaita/16x16/actions/go-down-symbolic.symbolic.png);
        }
        QScrollBar::left-arrow:horizontal {
            image: url(/usr/share/icons/Adwaita/16x16/actions/go-previous-symbolic.symbolic.png);
        }
        QScrollBar::right-arrow:horizontal {
            image: url(/usr/share/icons/Adwaita/16x16/actions/go-next-symbolic.symbolic.png);
        }''')

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.arrange.setText(_translate("MainWindow", "排序"))
        self.download.setText(_translate("MainWindow", "全部下载"))
        self.radioButton_play.setText(_translate("MainWindow", "按播放量"))
        self.radioButton_ctime.setText(_translate("MainWindow", "按发布时间"))
        self.radioButton_collect.setText(_translate("MainWindow", "按收藏量"))
        self.radioButton_dm.setText(_translate("MainWindow", "按弹幕量"))

    def get_id(self, index):
        index = index.row()
        self.id = self.favfolderlist[index]['id']

    def open_url(self, index):
        index = index.row()
        id = self.favfolderlist[index]['id']
        url = "https://www.bilibili.com/medialist/detail/ml" + id
        QtGui.QDesktopServices.openUrl(QtCore.QUrl(url))

    def video_download(self):
        if self.id == "":
            QMessageBox.critical(self, "错误", "请选择一个收藏夹！")
            return
        templist = []
        index = 1
        while True:
            result = parseFavFolder(getFavFolder(self.id, index, 20))
            if not result:
                break
            templist.extend(result)
            index += 1
        for items in templist:
            bvid = items['bvid']
            qn = 80
            t = ThreadForDownload(bvid, 1, qn)
            t.start()
            self.threadList.append(t)

    def arrangefavfolder(self):
        if self.id == "":
            QMessageBox.critical(self, "错误", "请选择一个收藏夹！")
            return
        if not self.radioButton_play.isChecked() and not self.radioButton_ctime.isChecked() and not self.radioButton_dm.isChecked() and not self.radioButton_collect.isChecked():
            QMessageBox.critical(self, "错误", "请选择一种排序方式！")
            return
        templist = []
        index = 1
        while True:
            result = parseFavFolder(getFavFolder(self.id, index, 20))
            if not result:
                break
            templist.extend(result)
            index += 1
        if self.radioButton_play.isChecked():
            templist = sorted(templist, key=lambda x: x['play'])
        elif self.radioButton_ctime.isChecked():
            templist = sorted(templist, key=lambda x: x['ctime'])
        elif self.radioButton_collect.isChecked():
            templist = sorted(templist, key=lambda x: x['collect'])
        elif self.radioButton_dm.isChecked():
            templist = sorted(templist, key=lambda x: x['danmaku'])

        aidlist = []
        for item in templist:
            aidlist.append(bvToav(item['bvid']))
        resources = ""
        for av in aidlist:
            resources = resources + str(av) + ":2,"
        resources = resources[:len(resources) - 1]
        r = addFavFolder("temp", "", 1)
        jsonData = json.loads(r)
        tempid = jsonData['data']['id']
        moveFavResource(self.id, tempid, resources)
        while True:
            jsonData = json.loads(getFavFolder(self.id, 1, 1))
            if jsonData['data']['medias']:
                time.sleep(0.5)
            else:
                break
        moveFavResource(tempid, self.id, resources)
        while True:
            jsonData = json.loads(getFavFolder(tempid, 1, 1))
            if jsonData['data']['medias']:
                time.sleep(0.5)
            else:
                break
        delFavFolder(tempid)

    def loadTable(self):
        i = 0
        session = requests.Session()
        for j in range(len(self.favfolderlist)):
            pic = QStandardItem()
            url = self.piclist[j] + "@170w_100h_1c.webp"
            if url.startswith("http"):
                r = session.get(url)
                pixmap = QPixmap()
                pixmap.loadFromData(r.content)
                icon = QIcon(pixmap)
                pic.setIcon(QIcon(icon))
                self.model.setItem(i, 0, pic)
            title = QStandardItem(self.favfolderlist[j]['title'])
            title.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
            title.setFont(QFont('Microsoft YaHei UI', 12))
            self.model.setItem(i, 1, title)
            id = QStandardItem(self.favfolderlist[j]['id'])
            id.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
            self.model.setItem(i, 2, id)
            QApplication.processEvents()
            i += 1
        self.tableView.setModel(self.model)
        self.tableView.setColumnWidth(0, 300)
        self.tableView.setColumnWidth(1, 550)
        self.tableView.horizontalHeader().setMinimumSectionSize(5)
        self.tableView.verticalHeader().setHidden(True)
        # self.tableView.horizontalHeader().setHidden(True)
        self.tableView.setShowGrid(False)
        self.tableView.horizontalHeader().setSectionResizeMode(0, QHeaderView.ResizeToContents)
        for j in range(len(self.favfolderlist)):
            self.tableView.setRowHeight(j, 100)

    def showEvent(self, a0: QtGui.QShowEvent):
        if readExistCookie():
            uid = getBiliUserUid(readExistCookie())
            if uid:
                favfolderlist = parseFavFolderList(getFavFolderList(uid))
                if favfolderlist:
                    self.favfolderlist = favfolderlist
        self.piclist.clear()
        for item in self.favfolderlist:
            url = getFavFolder(item['id'], 1, 1)
            jsonData = json.loads(url)
            self.piclist.append(jsonData['data']['info']['cover'])
        self.loadTable()


class ThreadForSelect(QThread):
    signal = QtCore.pyqtSignal(list)

    def __init__(self, dataList, ip, port):
        self.dataList = dataList
        self.resultList = []
        self.ip = ip
        self.port = port
        super(ThreadForSelect, self).__init__()

    def run(self):
        t_list = []
        for items in self.dataList:
            t = MyThread(parseAndGetTag, (items, self.ip, self.port))
            t_list.append(t)
            t.start()
        for t in t_list:
            t.join()
        for t in t_list:
            self.resultList.append(t.get_result())
        self.signal.emit(self.resultList)


def parseAndGetTag(items, ip, port):
    bvid = items['bvid']
    aid = bvToav(bvid)
    tagList = parseTag(getTag(aid, ip, port))
    if not tagList:
        tagList = []
    data = {
        'tag': tagList,
        'bvid': bvid,
        'aid': aid,
        'title': items['title'],
        'pic': items['pic']
    }
    return data


class MyThread(threading.Thread):
    def __init__(self, func, args=()):
        super(MyThread, self).__init__()
        self.func = func
        self.args = args

    def run(self):
        self.result = self.func(*self.args)

    def get_result(self):
        threading.Thread.join(self)  # 等待线程执行完毕
        try:
            return self.result
        except Exception:
            return None
