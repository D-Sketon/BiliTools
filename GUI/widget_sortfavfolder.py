# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'widget_FavFolder.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import threading

from PyQt5 import QtCore, QtWidgets
from PyQt5.QtCore import Qt, QThread
from PyQt5.QtGui import QStandardItemModel, QStandardItem
from PyQt5.QtWidgets import QMessageBox

from GUI.dialog_addfavfolder import Dialog_add
from Parse.parseData import parseTag
from Parse.parseFavFolder import parseFavFolderList, parseFavFolder
from Spider.doFavFolder import getFavFolderList, delFavFolder, getFavFolder, moveFavResource, copyFavResource
from Spider.getBiliInfo import getBiliUserUid
from Spider.getHeader import readExistCookie
from Spider.getTag import getTag
from Utils.bv2av import bvToav


class Widget_SortFavFolder(QtWidgets.QWidget):

    def __init__(self):
        super().__init__()
        self.ip = False
        self.port = False
        self.firstid = ""
        self.secondid = ""
        self.favfolderlist = []
        self.uid = ""
        if readExistCookie():
            self.uid = getBiliUserUid(readExistCookie())
            if self.uid:
                favfolderlist = parseFavFolderList(getFavFolderList(self.uid))
                if favfolderlist:
                    self.favfolderlist = favfolderlist
        self.model = QStandardItemModel(len(self.favfolderlist), 2)
        self.model.setHorizontalHeaderLabels(['名称', 'ID号'])
        i = 0
        for items in self.favfolderlist:
            title = QStandardItem(items['title'])
            title.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
            self.model.setItem(i, 0, title)
            id = QStandardItem(items['id'])
            id.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
            self.model.setItem(i, 1, id)
            i += 1
        self.dialog_add = Dialog_add()
        self.dialog_add.reload.connect(self.reloadTable)
        self.setupUi()

    def setupUi(self):
        self.setObjectName("Form")
        self.setFixedSize(930, 700)
        self.widget = QtWidgets.QWidget(self)
        self.widget.setGeometry(QtCore.QRect(0, 0, 931, 701))
        self.widget.setObjectName("widget")
        self.pushButton_add = QtWidgets.QPushButton(self.widget)
        self.pushButton_add.setGeometry(QtCore.QRect(20, 90, 93, 28))
        self.pushButton_add.setObjectName("pushButton_add")
        self.pushButton_del = QtWidgets.QPushButton(self.widget)
        self.pushButton_del.setGeometry(QtCore.QRect(20, 250, 93, 28))
        self.pushButton_del.setObjectName("pushButton_del")
        self.tableView_FavFolderList = QtWidgets.QTableView(self.widget)
        self.tableView_FavFolderList.setGeometry(QtCore.QRect(130, 60, 321, 501))
        self.tableView_FavFolderList.setObjectName("tableView_FavFolderList")
        self.tableView_FavFolderList_2 = QtWidgets.QTableView(self.widget)
        self.tableView_FavFolderList_2.setGeometry(QtCore.QRect(480, 60, 321, 501))
        self.tableView_FavFolderList_2.setObjectName("tableView_FavFolderList_2")
        self.lineEdit_tag2_2 = QtWidgets.QLineEdit(self.widget)
        self.lineEdit_tag2_2.setGeometry(QtCore.QRect(410, 600, 113, 31))
        self.lineEdit_tag2_2.setObjectName("lineEdit_tag2_2")
        self.lineEdit_tag2 = QtWidgets.QLineEdit(self.widget)
        self.lineEdit_tag2.setGeometry(QtCore.QRect(260, 600, 113, 31))
        self.lineEdit_tag2.setObjectName("lineEdit_tag2")
        self.lineEdit_tag1 = QtWidgets.QLineEdit(self.widget)
        self.lineEdit_tag1.setGeometry(QtCore.QRect(560, 600, 113, 31))
        self.lineEdit_tag1.setObjectName("lineEdit_tag1")
        self.radioButton_move = QtWidgets.QRadioButton(self.widget)
        self.radioButton_move.setGeometry(QtCore.QRect(820, 250, 115, 19))
        self.radioButton_move.setObjectName("radioButton_move")
        self.radioButton_copy = QtWidgets.QRadioButton(self.widget)
        self.radioButton_copy.setGeometry(QtCore.QRect(820, 100, 115, 19))
        self.radioButton_copy.setObjectName("radioButton_copy")
        self.pushButton_sort = QtWidgets.QPushButton(self.widget)
        self.pushButton_sort.setGeometry(QtCore.QRect(820, 500, 93, 28))
        self.pushButton_sort.setObjectName("pushButton_sort")
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setGeometry(QtCore.QRect(130, 600, 101, 31))
        self.label.setObjectName("label")

        self.retranslateUi(self)
        self.pushButton_add.clicked.connect(self.button_add)
        self.pushButton_del.clicked.connect(self.button_del_pre)
        self.pushButton_sort.clicked.connect(self.button_sort)
        self.tableView_FavFolderList.clicked.connect(self.clickedHandle1)
        self.tableView_FavFolderList_2.clicked.connect(self.clickedHandle2)
        QtCore.QMetaObject.connectSlotsByName(self)
        self.widget.setStyleSheet('''
        QWidget{
            background-color: #FFFFFF;
            font-family: "Microsoft YaHei";
            border-top-right-radius:15px;
            border-bottom-right-radius:15px;
        }   
        QLineEdit, QTextEdit, QPlainTextEdit, QSpinBox, QDoubleSpinBox, QTimeEdit, QDateEdit, QDateTimeEdit {
            border-width: 2px;
            border-radius: 8px;
            border-style: solid;
            border-top-color: qlineargradient(spread:pad, x1:0.5, y1:1, x2:0.5, y2:0, stop:0 #c1c9cf, stop:1 #d2d8dd);
            border-right-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 #c1c9cf, stop:1 #d2d8dd);
            border-bottom-color: qlineargradient(spread:pad, x1:0.5, y1:0, x2:0.5, y2:1, stop:0 #c1c9cf, stop:1 #d2d8dd);
            border-left-color: qlineargradient(spread:pad, x1:1, y1:0, x2:0, y2:0, stop:0 #c1c9cf, stop:1 #d2d8dd);
            background-color: #f4f4f4;
            color: #3d3d3d;
        }
        QLineEdit:focus, QTextEdit:focus, QPlainTextEdit:focus, QSpinBox:focus, QDoubleSpinBox:focus, QTimeEdit:focus, QDateEdit:focus, QDateTimeEdit:focus {
            border-width: 2px;
            border-radius: 8px;
            border-style: solid;
            border-top-color: qlineargradient(spread:pad, x1:0.5, y1:1, x2:0.5, y2:0, stop:0 #85b7e3, stop:1 #9ec1db);
            border-right-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 #85b7e3, stop:1 #9ec1db);
            border-bottom-color: qlineargradient(spread:pad, x1:0.5, y1:0, x2:0.5, y2:1, stop:0 #85b7e3, stop:1 #9ec1db);
            border-left-color: qlineargradient(spread:pad, x1:1, y1:0, x2:0, y2:0, stop:0 #85b7e3, stop:1 #9ec1db);
            background-color: #f4f4f4;
            color: #3d3d3d;
        }
        QLineEdit:disabled, QTextEdit:disabled, QPlainTextEdit:disabled, QSpinBox:disabled, QDoubleSpinBox:disabled, QTimeEdit:disabled, QDateEdit:disabled, QDateTimeEdit:disabled {
            color: #b9b9b9;
        }
        QRadioButton::indicator {
            height: 14px;
            width: 14px;
            border-style:solid;
            border-radius:7px;
            border-width: 1px;
        }
        QRadioButton::indicator:checked {
            border-color: #48a5fd;
            background-color: qradialgradient(cx:0.5, cy:0.5, radius:0.4,fx:0.5, fy:0.5, stop:0 #ffffff, stop:0.5 #ffffff, stop:0.6 #48a5fd, stop:1 #48a5fd);
        }
        QRadioButton::indicator:!checked {
            border-color: #a9b7c6;
            background-color: #fbfdfa;
        }
        QPushButton, QToolButton, QCommandLinkButton{
            padding: 0 5px 0 5px;
            border-style: solid;
            border-top-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:1, stop:0 #c1c9cf, stop:1 #d2d8dd);
            border-right-color: qlineargradient(spread:pad, x1:1, y1:0, x2:0, y2:0, stop:0 #c1c9cf, stop:1 #d2d8dd);
            border-bottom-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 #c1c9cf, stop:1 #d2d8dd);
            border-left-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 #c1c9cf, stop:1 #d2d8dd);
            border-width: 2px;
            border-radius: 8px;
            color: #616161;
            background-color: qlineargradient(spread:pad, x1:0.5, y1:0, x2:0.5, y2:1, stop:0 #fbfdfd, stop:0.5 #ffffff, stop:1 #fbfdfd);
        }
        QPushButton::default, QToolButton::default, QCommandLinkButton::default{
            border: 2px solid transparent;
            color: #FFFFFF;
            background-color: qlineargradient(spread:pad, x1:0.5, y1:0, x2:0.5, y2:1, stop:0 #84afe5, stop:1 #1168e4);
        }
        QPushButton:hover, QToolButton:hover, QCommandLinkButton:hover{
            color: #3d3d3d;
        }
        QPushButton:pressed, QToolButton:pressed, QCommandLinkButton:pressed{
            color: #aeaeae;
            background-color: qlineargradient(spread:pad, x1:0.5, y1:0, x2:0.5, y2:1, stop:0 #ffffff, stop:0.5 #fbfdfd, stop:1 #ffffff);
        }
        QPushButton:disabled, QToolButton:disabled, QCommandLinkButton:disabled{
            color: #616161;
            background-color: qlineargradient(spread:pad, x1:0.5, y1:0, x2:0.5, y2:1, stop:0 #dce7eb, stop:0.5 #e0e8eb, stop:1 #dee7ec);
        }
        QScrollBar:horizontal {
        max-height: 10px;
        border: 1px transparent grey;
        margin: 0px 20px 0px 20px;
        background: transparent;
        }
        QScrollBar:vertical {
            max-width: 10px;
            border: 1px transparent grey;
            margin: 20px 0px 20px 0px;
            background: transparent;
        }
        QScrollBar::handle:vertical, QScrollBar::handle:horizontal {
            background: #52595d;
            border-style: transparent;
            border-radius: 4px;
            min-height: 25px;
        }
        QScrollBar::handle:horizontal:hover, QScrollBar::handle:vertical:hover {
            background: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 #467dd1, stop:0.5 #3b88fc, stop:1 #467dd1);
        }
        QScrollBar::add-line, QScrollBar::sub-line {
            border: 2px transparent grey;
            border-radius: 4px;
            subcontrol-origin: margin;
            background: #b9b9b9;
        }
        QScrollBar::add-line:horizontal {
            width: 20px;
            subcontrol-position: right;
        }
        QScrollBar::add-line:vertical {
            height: 20px;
            subcontrol-position: bottom;
        }
        QScrollBar::sub-line:horizontal {
            width: 20px;
            subcontrol-position: left;
        }
        QScrollBar::sub-line:vertical {
            height: 20px;
            subcontrol-position: top;
        }
        QScrollBar::add-line:vertical:pressed, QScrollBar::add-line:horizontal:pressed, QScrollBar::sub-line:horizontal:pressed, QScrollBar::sub-line:vertical:pressed {
            background: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 #467dd1, stop:0.5 #3b88fc, stop:1 #467dd1);
        }
        QScrollBar::add-page:horizontal, QScrollBar::sub-page:horizontal, QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {
            background: none;
        }
        QScrollBar::up-arrow:vertical {
            image: url(/usr/share/icons/Adwaita/16x16/actions/go-up-symbolic.symbolic.png);
        }
        QScrollBar::down-arrow:vertical {
            image: url(/usr/share/icons/Adwaita/16x16/actions/go-down-symbolic.symbolic.png);
        }
        QScrollBar::left-arrow:horizontal {
            image: url(/usr/share/icons/Adwaita/16x16/actions/go-previous-symbolic.symbolic.png);
        }
        QScrollBar::right-arrow:horizontal {
            image: url(/usr/share/icons/Adwaita/16x16/actions/go-next-symbolic.symbolic.png);
        }''')

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.pushButton_add.setText(_translate("Form", "添加收藏夹"))
        self.pushButton_del.setText(_translate("Form", "删除收藏夹"))
        self.radioButton_move.setText(_translate("Form", "移动"))
        self.radioButton_copy.setText(_translate("Form", "复制"))
        self.pushButton_sort.setText(_translate("Form", "分类"))
        self.label.setText(_translate("Form", "根据TAG筛选"))

    def button_sort(self):
        if self.firstid == "":
            QMessageBox.critical(self, "错误", "未选择源收藏夹！")
            return
        if self.secondid == "":
            QMessageBox.critical(self, "错误", "未选择目标收藏夹！")
            return
        if not self.radioButton_move.isChecked() and not self.radioButton_copy.isChecked():
            QMessageBox.critical(self, "错误", "未选择分类方式！")
            return
        if self.lineEdit_tag1.text() == "" and self.lineEdit_tag2.text() == "" and self.lineEdit_tag3.text() == "":
            QMessageBox.critical(self, "错误", "请至少填写一个tag！")
            return
        templist = []
        index = 1
        while True:
            result = parseFavFolder(getFavFolder(self.firstid, index, 20))
            if not result:
                break
            templist.extend(result)
            index += 1
        self.t = ThreadForSelect(templist, self.ip, self.port)
        self.t.signal.connect(self.getCallBack)
        self.t.start()

    def clickedHandle1(self, index):
        index = index.row()
        self.firstid = self.favfolderlist[index]['id']

    def clickedHandle2(self, index):
        index = index.row()
        self.secondid = self.favfolderlist[index]['id']

    def button_add(self):
        self.dialog_add.show()

    def button_del_pre(self):
        if self.firstid == "":
            QMessageBox.critical(self, "错误", "未选中收藏夹！")
            return
        reply = QMessageBox.question(self, '消息框标题', '你确定要删除吗?', QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.Yes:
            self.button_del()
        else:
            pass

    def button_del(self):
        delFavFolder(self.firstid)
        self.reloadTable()

    def reloadTable(self):
        if readExistCookie():
            uid = getBiliUserUid(readExistCookie())
            if uid:
                favfolderlist = parseFavFolderList(getFavFolderList(uid))
                if favfolderlist:
                    self.favfolderlist = favfolderlist
        self.model = QStandardItemModel(len(self.favfolderlist), 2)
        self.model.setHorizontalHeaderLabels(['名称', 'ID号'])
        i = 0
        for items in self.favfolderlist:
            title = QStandardItem(items['title'])
            title.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
            self.model.setItem(i, 0, title)
            id = QStandardItem(items['id'])
            id.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
            self.model.setItem(i, 1, id)
            i += 1
        self.tableView_FavFolderList.setModel(self.model)
        self.tableView_FavFolderList_2.setModel(self.model)

    def showEvent(self, e):
        self.reloadTable()

    def getCallBack(self, msg):
        self.favfolderlist = msg
        aidList = self.tagSearch()
        resources = ""
        for item in aidList:
            resources = resources + str(item) + ":2,"
        resources = resources[:len(resources) - 1]
        isMove = self.radioButton_move.isChecked()
        if isMove:
            moveFavResource(self.firstid, self.secondid, resources)
        else:
            copyFavResource(self.firstid, self.secondid, self.uid, resources)

    def tagSearch(self):
        aidList = []
        tag1 = self.lineEdit_tag1.text()
        tag2 = self.lineEdit_tag2.text()
        tag3 = self.lineEdit_tag2_2.text()
        for items in self.favfolderlist:
            tagList = items['tag']
            for tag in tagList:
                if tag == tag1 or tag == tag2 or tag == tag3:
                    aidList.append(items['aid'])
                    break
        return aidList


class ThreadForSelect(QThread):
    signal = QtCore.pyqtSignal(list)

    def __init__(self, dataList, ip, port):
        self.dataList = dataList
        self.resultList = []
        self.ip = ip
        self.port = port
        super(ThreadForSelect, self).__init__()

    def run(self):
        t_list = []
        for items in self.dataList:
            t = MyThread(parseAndGetTag, (items, self.ip, self.port))
            t_list.append(t)
            t.start()
        for t in t_list:
            t.join()
        for t in t_list:
            self.resultList.append(t.get_result())
        self.signal.emit(self.resultList)


def parseAndGetTag(items, ip, port):
    bvid = items['bvid']
    aid = bvToav(bvid)
    tagList = parseTag(getTag(aid, ip, port))
    if not tagList:
        tagList = []
    data = {
        'tag': tagList,
        'bvid': bvid,
        'aid': aid,
        'title': items['title'],
        'pic': items['pic']
    }
    return data


class MyThread(threading.Thread):
    def __init__(self, func, args=()):
        super(MyThread, self).__init__()
        self.func = func
        self.args = args

    def run(self):
        self.result = self.func(*self.args)

    def get_result(self):
        threading.Thread.join(self)  # 等待线程执行完毕
        try:
            return self.result
        except Exception:
            return None
