# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'widget_downloadhistory.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import json

from PyQt5 import QtCore, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QStandardItemModel, QStandardItem
from PyQt5.QtWidgets import QHeaderView

from GUI.widget_download import ThreadForDownload


class Widget_DownloadHistory(QtWidgets.QWidget):

    def __init__(self):
        super().__init__()
        self.datalist = []
        self.clickedbvid = ""
        self.clickedp_num = 1
        self.clickedqn = ""
        with open('DownloadRec', 'r') as f:
            content = json.load(f)
            self.datalist = content['data']
        self.model = QStandardItemModel(len(self.datalist), 6)
        self.model.setHorizontalHeaderLabels(['时间', '标题', "分P", '画质', 'BV号', '状态'])
        i = 0
        for item in self.datalist:
            time = QStandardItem(item['time'])
            time.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
            self.model.setItem(i, 0, time)
            title = QStandardItem(item['title'])
            title.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
            self.model.setItem(i, 1, title)
            p_num = QStandardItem(item['p_num'])
            p_num.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
            self.model.setItem(i, 2, p_num)
            qn = QStandardItem(item['qn'])
            qn.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
            self.model.setItem(i, 3, qn)
            bvid = QStandardItem(item['bvid'])
            bvid.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
            self.model.setItem(i, 4, bvid)
            status = QStandardItem(item['status'])
            status.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
            self.model.setItem(i, 5, status)
            i += 1
        self.setupUi()

    def setupUi(self):
        self.setObjectName("Form")
        self.setFixedSize(930, 700)
        self.widget = QtWidgets.QWidget(self)
        self.widget.setGeometry(QtCore.QRect(0, 0, 931, 701))
        self.widget.setObjectName("widget")
        self.tableView_downloadhistory = QtWidgets.QTableView(self.widget)
        self.tableView_downloadhistory.setGeometry(QtCore.QRect(40, 50, 851, 500))
        self.tableView_downloadhistory.setObjectName("tableView_downloadhistory")
        self.tableView_downloadhistory.setModel(self.model)
        self.tableView_downloadhistory.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tableView_downloadhistory.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.tableView_downloadhistory.horizontalHeader().setSectionResizeMode(0, QHeaderView.Interactive)
        self.tableView_downloadhistory.horizontalHeader().setSectionResizeMode(1, QHeaderView.Interactive)
        self.tableView_downloadhistory.horizontalHeader().setSectionResizeMode(2, QHeaderView.Interactive)
        self.tableView_downloadhistory.setColumnWidth(0, 160)
        self.tableView_downloadhistory.setColumnWidth(1, 300)
        self.tableView_downloadhistory.setColumnWidth(2, 50)
        self.tableView_downloadhistory.setColumnWidth(3, 10)
        self.tableView_downloadhistory.setColumnWidth(4, 200)
        self.pushButton_clearhistory = QtWidgets.QPushButton(self.widget)
        self.pushButton_clearhistory.setObjectName("pushButton_clearhistory")
        self.pushButton_clearhistory.setGeometry(QtCore.QRect(800, 630, 91, 28))
        self.pushButton_redownload = QtWidgets.QPushButton(self.widget)
        self.pushButton_redownload.setObjectName("pushButton_redownload")
        self.pushButton_redownload.setGeometry(QtCore.QRect(600, 630, 91, 28))
        self.pushButton_flushhistory = QtWidgets.QPushButton(self.widget)
        self.pushButton_flushhistory.setObjectName("pushButton_flushhistory")
        self.pushButton_flushhistory.setGeometry(QtCore.QRect(700, 630, 91, 28))

        self.retranslateUi(self)
        self.pushButton_clearhistory.clicked.connect(self.button_clearhistory)
        self.pushButton_redownload.clicked.connect(self.button_redownload)
        self.pushButton_flushhistory.clicked.connect(self.button_flushhistory)
        self.tableView_downloadhistory.clicked.connect(self.clickedHandle)
        QtCore.QMetaObject.connectSlotsByName(self)
        self.widget.setStyleSheet('''
        QWidget{
          background-color: #FFFFFF;
          font-family: "Microsoft YaHei";
          border-top-right-radius:15px;
          border-bottom-right-radius:15px;
        }
        QLineEdit, QTextEdit, QPlainTextEdit, QSpinBox, QDoubleSpinBox, QTimeEdit, QDateEdit, QDateTimeEdit {
          border-width: 2px;
          border-radius: 8px;
          border-style: solid;
          border-top-color: qlineargradient(spread:pad, x1:0.5, y1:1, x2:0.5, y2:0, stop:0 #c1c9cf, stop:1 #d2d8dd);
          border-right-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 #c1c9cf, stop:1 #d2d8dd);
          border-bottom-color: qlineargradient(spread:pad, x1:0.5, y1:0, x2:0.5, y2:1, stop:0 #c1c9cf, stop:1 #d2d8dd);
          border-left-color: qlineargradient(spread:pad, x1:1, y1:0, x2:0, y2:0, stop:0 #c1c9cf, stop:1 #d2d8dd);
          background-color: #f4f4f4;
          color: #3d3d3d;
        }
        QLineEdit:focus, QTextEdit:focus, QPlainTextEdit:focus, QSpinBox:focus, QDoubleSpinBox:focus, QTimeEdit:focus, QDateEdit:focus, QDateTimeEdit:focus {
          border-width: 2px;
          border-radius: 8px;
          border-style: solid;
          border-top-color: qlineargradient(spread:pad, x1:0.5, y1:1, x2:0.5, y2:0, stop:0 #85b7e3, stop:1 #9ec1db);
          border-right-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 #85b7e3, stop:1 #9ec1db);
          border-bottom-color: qlineargradient(spread:pad, x1:0.5, y1:0, x2:0.5, y2:1, stop:0 #85b7e3, stop:1 #9ec1db);
          border-left-color: qlineargradient(spread:pad, x1:1, y1:0, x2:0, y2:0, stop:0 #85b7e3, stop:1 #9ec1db);
          background-color: #f4f4f4;
          color: #3d3d3d;
        }
        QLineEdit:disabled, QTextEdit:disabled, QPlainTextEdit:disabled, QSpinBox:disabled, QDoubleSpinBox:disabled, QTimeEdit:disabled, QDateEdit:disabled, QDateTimeEdit:disabled {
          color: #b9b9b9;
        }
        QPushButton, QToolButton, QCommandLinkButton{
        padding: 0 5px 0 5px;
        border-style: solid;
        border-top-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:1, stop:0 #c1c9cf, stop:1 #d2d8dd);
        border-right-color: qlineargradient(spread:pad, x1:1, y1:0, x2:0, y2:0, stop:0 #c1c9cf, stop:1 #d2d8dd);
        border-bottom-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 #c1c9cf, stop:1 #d2d8dd);
        border-left-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 #c1c9cf, stop:1 #d2d8dd);
        border-width: 2px;
        border-radius: 8px;
        color: #616161;
        background-color: qlineargradient(spread:pad, x1:0.5, y1:0, x2:0.5, y2:1, stop:0 #fbfdfd, stop:0.5 #ffffff, stop:1 #fbfdfd);
        }
        QPushButton::default, QToolButton::default, QCommandLinkButton::default{
            border: 2px solid transparent;
            color: #FFFFFF;
            background-color: qlineargradient(spread:pad, x1:0.5, y1:0, x2:0.5, y2:1, stop:0 #84afe5, stop:1 #1168e4);
        }
        QPushButton:hover, QToolButton:hover, QCommandLinkButton:hover{
            color: #3d3d3d;
        }
        QPushButton:pressed, QToolButton:pressed, QCommandLinkButton:pressed{
            color: #aeaeae;
            background-color: qlineargradient(spread:pad, x1:0.5, y1:0, x2:0.5, y2:1, stop:0 #ffffff, stop:0.5 #fbfdfd, stop:1 #ffffff);
        }
        QPushButton:disabled, QToolButton:disabled, QCommandLinkButton:disabled{
            color: #616161;
            background-color: qlineargradient(spread:pad, x1:0.5, y1:0, x2:0.5, y2:1, stop:0 #dce7eb, stop:0.5 #e0e8eb, stop:1 #dee7ec);
        }
        QScrollBar:horizontal {
        max-height: 10px;
        border: 1px transparent grey;
        margin: 0px 20px 0px 20px;
        background: transparent;
        }
        QScrollBar:vertical {
            max-width: 10px;
            border: 1px transparent grey;
            margin: 20px 0px 20px 0px;
            background: transparent;
        }
        QScrollBar::handle:vertical, QScrollBar::handle:horizontal {
            background: #52595d;
            border-style: transparent;
            border-radius: 4px;
            min-height: 25px;
        }
        QScrollBar::handle:horizontal:hover, QScrollBar::handle:vertical:hover {
            background: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 #467dd1, stop:0.5 #3b88fc, stop:1 #467dd1);
        }
        QScrollBar::add-line, QScrollBar::sub-line {
            border: 2px transparent grey;
            border-radius: 4px;
            subcontrol-origin: margin;
            background: #b9b9b9;
        }
        QScrollBar::add-line:horizontal {
            width: 20px;
            subcontrol-position: right;
        }
        QScrollBar::add-line:vertical {
            height: 20px;
            subcontrol-position: bottom;
        }
        QScrollBar::sub-line:horizontal {
            width: 20px;
            subcontrol-position: left;
        }
        QScrollBar::sub-line:vertical {
            height: 20px;
            subcontrol-position: top;
        }
        QScrollBar::add-line:vertical:pressed, QScrollBar::add-line:horizontal:pressed, QScrollBar::sub-line:horizontal:pressed, QScrollBar::sub-line:vertical:pressed {
            background: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 #467dd1, stop:0.5 #3b88fc, stop:1 #467dd1);
        }
        QScrollBar::add-page:horizontal, QScrollBar::sub-page:horizontal, QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {
            background: none;
        }
        QScrollBar::up-arrow:vertical {
            image: url(/usr/share/icons/Adwaita/16x16/actions/go-up-symbolic.symbolic.png);
        }
        QScrollBar::down-arrow:vertical {
            image: url(/usr/share/icons/Adwaita/16x16/actions/go-down-symbolic.symbolic.png);
        }
        QScrollBar::left-arrow:horizontal {
            image: url(/usr/share/icons/Adwaita/16x16/actions/go-previous-symbolic.symbolic.png);
        }
        QScrollBar::right-arrow:horizontal {
            image: url(/usr/share/icons/Adwaita/16x16/actions/go-next-symbolic.symbolic.png);
        }''')

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.pushButton_clearhistory.setText(_translate("Form", "清空记录"))
        self.pushButton_redownload.setText(_translate("Form", "重新下载"))
        self.pushButton_flushhistory.setText(_translate("Form", "刷新记录"))

    def showEvent(self, e):
        with open('DownloadRec', 'r') as f:
            content = json.load(f)
            self.datalist = content['data']
            self.reloadTable()

    def button_clearhistory(self):
        with open('DownloadRec', 'w') as f:
            f.write("{\"data\":[]}")
        with open('DownloadRec', 'r') as f:
            content = json.load(f)
            self.datalist = content['data']
            self.reloadTable()

    def button_redownload(self):
        self.t = ThreadForDownload(self.clickedbvid, 1, self.clickedqn)
        self.t.start()

    def button_flushhistory(self):
        with open('DownloadRec', 'r') as f:
            content = json.load(f)
            self.datalist = content['data']
            self.reloadTable()

    def reloadTable(self):
        self.model = QStandardItemModel(len(self.datalist), 6)
        self.model.setHorizontalHeaderLabels(['时间', '标题', "分P", '画质', 'BV号', '状态'])
        i = 0
        for item in self.datalist:
            time = QStandardItem(item['time'])
            time.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
            self.model.setItem(i, 0, time)
            title = QStandardItem(item['title'])
            title.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
            self.model.setItem(i, 1, title)
            p_num = QStandardItem(item['p_num'])
            p_num.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
            self.model.setItem(i, 2, p_num)
            qn = QStandardItem(item['qn'])
            qn.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
            self.model.setItem(i, 3, qn)
            bvid = QStandardItem(item['bvid'])
            bvid.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
            self.model.setItem(i, 4, bvid)
            status = QStandardItem(item['status'])
            status.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
            self.model.setItem(i, 5, status)
            i += 1
        self.tableView_downloadhistory.setModel(self.model)

    def clickedHandle(self, index):
        index = index.row()
        self.clickedbvid = self.datalist[index]['bvid']
        quality = self.datalist[index]['qn']
        qn = 64
        if quality == "360P":
            qn = 16
        elif quality == "480P":
            qn = 32
        elif quality == "720P":
            qn = 64
        elif quality == "1080P":
            qn = 80
        elif quality == "1080P+":
            qn = 112
        elif quality == "720P60":
            qn = 74
        elif quality == "1080P60":
            qn = 116
        elif quality == "4K":
            qn = 120
        self.clickedqn = qn
        self.clickedp_num = int(self.datalist[index]['p_num'])
